{"version":3,"sources":["components/Calculator.js","actions/calculatorAction.js","actions/types.js","reducers/calculatorReducer.js","reducers/index.js","store.js","App.js","serviceWorker.js","index.js"],"names":["Calculator","props","handleClear","bind","handleOperation","handleNumber","handleEqual","map","op","index","Operation","key","value","onClick","num","this","clearCalculator","newData","numbers","length","operations","currentNumber","splice","handleCalculatorNumber","event","target","handleCalculatorOperation","handleCalculatorEqual","console","log","CalculatorDisplay","NumberDisplay","Clear","NumbersAndOperations","NumberRow","getNumbers","OperationRow","getOperations","Equal","React","Component","connect","state","calculatorState","dispatch","type","payload","data","axios","post","then","res","action","styled","div","button","Number","initialState","combineReducers","middleware","thunk","store","createStore","rootReducer","applyMiddleware","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.572f2590.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from '@emotion/styled';\nimport { connect } from 'react-redux';\nimport {\n  clearCalculator,\n  handleCalculatorNumber,\n  handleCalculatorOperation,\n  handleCalculatorEqual,\n} from '../actions/calculatorAction';\n\nclass Calculator extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleClear = this.handleClear.bind(this);\n    this.handleOperation = this.handleOperation.bind(this);\n    this.handleNumber = this.handleNumber.bind(this);\n    this.handleEqual = this.handleEqual.bind(this);\n  }\n\n  getOperations() {\n    const operations = ['+', '-', '*', '/'];\n    return operations.map((op, index) => {\n      return (\n        <Operation key={index} value={op} onClick={this.handleOperation}>\n          {op}\n        </Operation>\n      );\n    });\n  }\n\n  getNumbers() {\n    const numbers = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];\n    return numbers.map((num, index) => {\n      return (\n        <Number key={index} onClick={() => this.handleNumber(num)}>\n          {num}\n        </Number>\n      );\n    });\n  }\n\n  handleClear() {\n    this.props.clearCalculator();\n  }\n\n  handleNumber(num) {\n    const newData = {};\n    if (this.props.numbers.length === this.props.operations.length) {\n      newData.currentNumber = num;\n      newData.numbers = [...this.props.numbers, num];\n    } else {\n      newData.currentNumber = this.props.currentNumber * 10 + num;\n      newData.numbers = [\n        ...this.props.numbers.splice(0, this.props.numbers.length - 1),\n        newData.currentNumber,\n      ];\n    }\n    this.props.handleCalculatorNumber(newData);\n  }\n\n  handleOperation(event) {\n    if (this.props.numbers.length > this.props.operations.length) {\n      const newData = {\n        operations: [...this.props.operations, event.target.value],\n      };\n      this.props.handleCalculatorOperation(newData);\n    }\n  }\n\n  handleEqual() {\n    if (\n      this.props.numbers.length > this.props.operations.length &&\n      this.props.operations.length > 0\n    ) {\n      const newData = {\n        numbers: this.props.numbers,\n        operations: this.props.operations,\n      };\n      this.props.handleCalculatorEqual(newData);\n    }\n  }\n\n  render() {\n    console.log(this.props);\n    return (\n      <CalculatorDisplay>\n        <NumberDisplay>{this.props.currentNumber}</NumberDisplay>\n        <Clear onClick={this.handleClear}>Clear</Clear>\n        <NumbersAndOperations>\n          <NumberRow>{this.getNumbers()}</NumberRow>\n          <OperationRow>{this.getOperations()}</OperationRow>\n        </NumbersAndOperations>\n        <Equal onClick={this.handleEqual}>=</Equal>\n      </CalculatorDisplay>\n    );\n  }\n}\n\nCalculator.propTypes = {\n  clearCalculator: PropTypes.func.isRequired,\n  handleCalculatorNumber: PropTypes.func.isRequired,\n  handleCalculatorOperation: PropTypes.func.isRequired,\n  handleCalculatorEqual: PropTypes.func.isRequired,\n  numbers: PropTypes.array.isRequired,\n  operations: PropTypes.array.isRequired,\n  currentNumber: PropTypes.number.isRequired,\n};\n\nconst mapStateToProps = state => ({\n  numbers: state.calculatorState.numbers,\n  operations: state.calculatorState.operations,\n  currentNumber: state.calculatorState.currentNumber,\n});\n\nexport default connect(mapStateToProps, {\n  clearCalculator,\n  handleCalculatorNumber,\n  handleCalculatorOperation,\n  handleCalculatorEqual,\n})(Calculator);\n\nconst CalculatorDisplay = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 200px;\n  height: 200px;\n  margin-left: 20px;\n  margin-top: 20px;\n`;\n\nconst Clear = styled.button`\n  width: 200px;\n`;\nconst NumberDisplay = styled.div`\n  height: 20px;\n  background-color: #4a1b18;\n  text-align: right;\n  padding-right: 10px;\n  color: white;\n`;\n\nconst NumbersAndOperations = styled.div`\n  display: flex;\n  flex-direction: row;\n  width: 200px;\n`;\nconst NumberRow = styled.div`\n  width: 125px;\n  height: 50px;\n  margin-right: 25px;\n`;\n\nconst Number = styled.button`\n  width: 25px;\n  height: 20px;\n`;\n\nconst OperationRow = styled.div`\n  width: 50px;\n`;\n\nconst Operation = styled.button`\n  width: 25px;\n  height: 20px;\n  background-color: #d90d4b;\n  color: white;\n`;\n\nconst Equal = styled.button`\n  width: 200px;\n`;\n","import axios from 'axios';\nimport {\n  CLEAR_CALCULATOR,\n  HANDLE_NUMBER,\n  HANDLE_OPERATION,\n  HANDLE_EQUAL,\n} from './types';\n\nexport const clearCalculator = () => dispatch => {\n  const action = {\n    type: CLEAR_CALCULATOR,\n    payload: {\n      numbers: [],\n      operations: [],\n      currentNumber: 0,\n    },\n  };\n  dispatch(action);\n};\n\nexport const handleCalculatorNumber = data => dispatch => {\n  const action = {\n    type: HANDLE_NUMBER,\n    payload: {\n      numbers: data.numbers,\n      currentNumber: data.currentNumber,\n    },\n  };\n  dispatch(action);\n};\n\nexport const handleCalculatorOperation = data => dispatch => {\n  const action = {\n    type: HANDLE_OPERATION,\n    payload: {\n      operations: data.operations,\n    },\n  };\n  dispatch(action);\n};\n\nexport const handleCalculatorEqual = data => dispatch => {\n  axios\n    .post('http://localhost:5000/equal', {\n      numbers: data.numbers,\n      operations: data.operations,\n    })\n    .then(res => {\n      const action = {\n        type: HANDLE_EQUAL,\n        payload: {\n          numbers: [res.data.value],\n          operations: [],\n          currentNumber: res.data.value,\n        },\n      };\n      dispatch(action);\n    });\n};\n","export const CLEAR_CALCULATOR = 'CLEAR_CALCULATOR';\nexport const HANDLE_NUMBER = 'HANDLE_NUMBER';\nexport const HANDLE_OPERATION = 'HANDLE_OPERATION';\nexport const HANDLE_EQUAL = 'HANDLE_EQUAL';\n","import {\n  CLEAR_CALCULATOR,\n  HANDLE_NUMBER,\n  HANDLE_OPERATION,\n  HANDLE_EQUAL,\n} from '../actions/types';\n\nconst initialState = {\n  numbers: [],\n  operations: [],\n  currentNumber: 0,\n};\n\nexport default function calculatorReducer(state = initialState, action) {\n  switch (action.type) {\n    case CLEAR_CALCULATOR:\n      return {\n        ...state,\n        numbers: action.payload.numbers,\n        operations: action.payload.operations,\n        currentNumber: action.payload.currentNumber,\n      };\n    case HANDLE_NUMBER:\n      return {\n        ...state,\n        numbers: action.payload.numbers,\n        currentNumber: action.payload.currentNumber,\n      };\n    case HANDLE_OPERATION:\n      return {\n        ...state,\n        operations: action.payload.operations,\n      };\n    case HANDLE_EQUAL:\n      return {\n        ...state,\n        numbers: action.payload.numbers,\n        operations: action.payload.operations,\n        currentNumber: action.payload.currentNumber,\n      };\n    default:\n      return state;\n  }\n}\n","import { combineReducers } from 'redux';\nimport calculatorReducer from './calculatorReducer.js';\n\nexport default combineReducers({\n  calculatorState: calculatorReducer,\n});\n","import { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport rootReducer from './reducers';\n\nconst initialState = {};\n\nconst middleware = [thunk];\n\nconst store = createStore(\n  rootReducer,\n  initialState,\n  applyMiddleware(...middleware)\n);\n\nexport default store;\n","import React from 'react';\nimport { Provider } from 'react-redux';\nimport Calculator from './components/Calculator';\nimport store from './store';\n\nimport './App.css';\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <div className=\"App\">\n        <Calculator />\n      </div>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}